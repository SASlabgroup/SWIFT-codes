function reformatSIGmat(missiondir)
% Reformats a Sig1000 mat file generated by the Nortek Signature Viewer
% software to match the convensions of the lab structures
% K.Zeiden June 2024

bfiles = dir([missiondir '\SIG\Raw\*\*.mat']);
if isempty(bfiles)
    disp('No burst mat files found.')
    return
end
nburst = length(bfiles);

progressbar()
for iburst = 1:nburst

    disp(['Reformatting ' bfiles(iburst).name ])

    vars = whos('-file',bfiles(iburst).name);

    % Check to see if already in lab format, skip file if so
    if any(strcmp({vars.name},'avg'))
        disp('Burst file already in Lab format. Skipping...')
        continue
    elseif any(strcmp({vars.name},'Data')) && any(strcmp({vars.name},'Config'))
        load([bfiles(iburst).folder '\' bfiles(iburst).name])
    else
        disp('No Data or Config structure found. Skipping...')
        continue
    end

    % Average Data
    if strcmp(Config.Plan_AverageEnabled,'True')

        nbeams_avg = Config.Average_NBeams;
        nbins_avg = Config.Average_NCells;
        npings_avg = length(Data.Average_Time);
        avg.time = Data.Average_Time;
        avg.SoundSpeed = Data.Average_Soundspeed;
        avg.Temperature = Data.Average_Temperature;
        avg.Pressure = Data.Average_Pressure;
        avg.Heading = Data.Average_Heading;
        avg.Pitch = Data.Average_Pitch;
        avg.Roll = Data.Average_Roll;
        avg.CellSize = Config.Average_CellSize;
        avg.Blanking = Config.Average_BlankingDistance;
        avg.Magnetometer = Data.Average_Magnetometer; 
        avg.Accelerometer = Data.Average_Accelerometer;

        avg.VelocityData = NaN(npings_avg,nbins_avg,nbeams_avg);
        avg.CorrelationData = NaN(npings_avg,nbins_avg,nbeams_avg);
        avg.AmplitudeData = NaN(npings_avg,nbins_avg,nbeams_avg);
        for ibeam = 1:nbeams_avg
            velname = ['Average_VelBeam' num2str(ibeam)];
            corname = ['Average_CorBeam' num2str(ibeam)];
            ampname = ['Average_AmpBeam' num2str(ibeam)];
        avg.VelocityData(:,:,ibeam) = Data.(velname);
        avg.CorrelationData(:,:,ibeam) = Data.(corname);
        avg.AmplitudeData(:,:,ibeam) = Data.(ampname);
        end

        % Need to do AST, Altimeter,AHRS
        % if Config.Average_Altimeter
        %     avg.AltimeterDistance = Data.Average_AltimeterDistanceLE;
        %     avg.AltimeterQuality = Data.Average_AltimeterQualityLE; 
        %     avg.Status = Data.Average_AltimeterStatus;
        % end

    end

    % Burst data
    if strcmp(Config.Plan_BurstEnabled,'True')

        nbins_burst = Config.BurstHR_NCells;
        npings_burst = length(Data.BurstHR_Time);
        burst.time = Data.BurstHR_Time;
        burst.SoundSpeed = Data.BurstHR_Soundspeed;
        burst.Temperature = Data.BurstHR_Temperature;
        burst.Pressure = Data.BurstHR_Pressure;
        burst.Heading = Data.BurstHR_Heading;
        burst.Pitch = Data.BurstHR_Pitch;
        burst.Roll = Data.BurstHR_Roll;
        burst.CellSize = Config.BurstHR_CellSize;
        burst.Blanking = Config.BurstHR_BlankingDistance;
        burst.Magnetometer = Data.BurstHR_Magnetometer; 
        burst.Accelerometer = Data.BurstHR_Accelerometer;

        % Single Beam HR
        if strcmp(Config.Burst_HighResolution5,'True') && ~strcmp(Config.Burst_HighResolution,'True')

            burst.VelocityData = Data.BurstHR_VelBeam5;
            burst.AmplitudeData = Data.BurstHR_AmpBeam5;
            burst.CorrelationData = Data.BurstHR_CorBeam5;

        % 5-beam HR
        elseif strcmp(Config.Burst_HighResolution5,'True') && strcmp(Config.Burst_HighResolution,'True')

            nbeams_burst = Config.Burst_NBeams;
            burst.VelocityData = NaN(npings_burst,nbins_burst,nbeams_burst);
            burst.CorrelationData = NaN(npings_burst,nbins_burst,nbeams_burst);
            burst.AmplitudeData = NaN(npings_burst,nbins_burst,nbeams_burst);
            % Slanted Beams
            for ibeam = 1:4
                velname = ['BurstHR_VelBeam' num2str(ibeam)];
                corname = ['BurstHR_CorBeam' num2str(ibeam)];
                ampname = ['BurstHR_AmpBeam' num2str(ibeam)];
                burst.VelocityData(:,:,ibeam) = Data.(velname);
                burst.CorrelationData(:,:,ibeam ) = Data.(corname);
                burst.AmplitudeData(:,:,ibeam) = Data.(ampname);
            end
            % Vertical Beam
            nburst = size(burst.VelocityData,1);
            nburst5 = size(Data.IBurstHR_VelBeam5,1);
            if nburst == nburst5
            burst.VelocityData(:,:,5) = Data.IBurstHR_VelBeam5;
            burst.CorrelationData(:,:,5) = Data.IBurstHR_CorBeam5;
            burst.AmplitudeData(:,:,5) = Data.IBurstHR_AmpBeam5;
            elseif nburst > nburst5
            burst.VelocityData(1:nburst5,:,5) = Data.IBurstHR_VelBeam5;
            burst.CorrelationData(1:nburst5,:,5) = Data.IBurstHR_CorBeam5;
            burst.AmplitudeData(1:nburst5,:,5) = Data.IBurstHR_AmpBeam5;
            else
                burst.VelocityData(:,:,5) = Data.IBurstHR_VelBeam5(1:nburst,:);
                burst.CorrelationData(:,:,5) = Data.IBurstHR_CorBeam5(1:nburst,:);
                burst.AmplitudeData(:,:,5) = Data.IBurstHR_AmpBeam5(1:nburst,:);
            end


        end

    end

    % Echogram Data
    if strcmp(Config.Burst_EchoSounder,'True')

        ename = ['Echo1Bin1_' num2str(Config.EchoSounder_Frequency1) 'kHz'];

        burst.time = ([ename '_Time']);
        burst.SoundSpeed = Data.([ename '_Soundspeed']);
        burst.Temperature = Data.([ename '_Temperature']);
        burst.Pressure = Data.([ename '_Pressure']);
        burst.Heading = Data.([ename '_Heading']);
        burst.Pitch = Data.([ename '_Pitch']);
        burst.Roll = Data.([ename '_Roll']);

        echo.CellSize = Config.EchoSounder_CellSize;
        echo.Blanking = Config.EchoSounder_BlankingDistance;

        burst.Magnetometer = Data.([ename '_Magnetometer']);
        burst.Accelerometer = Data.([ename '_Accelerometer']);

        burst.EchoSounder = Data.([ename '_Echo']);
    end

    % Save
    if exist('burst','var') && exist('echo','var')
        save([bfiles(iburst).folder '\' bfiles(iburst).name(1:end-4) '.mat'],...
        'burst','avg','echo')
    elseif exist('burst','var')
                save([bfiles(iburst).folder '\' bfiles(iburst).name(1:end-4) '.mat'],...
        'burst','avg')
    else
                save([bfiles(iburst).folder '\' bfiles(iburst).name(1:end-4) '.mat'],...
        'avg');
    end

    progressbar(iburst/nburst)
% End file loop
end

% End function
end