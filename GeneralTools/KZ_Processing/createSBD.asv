% aggregate, concat, and read all onboard processed SWIFT data (once offloaded from SD card) 
% run this in a dedicated directory for the results
% 
% (this fills in the results not sent by Iridium when running more than 1 burst per hour) 
%
% J. Thomson, 4/2014
%               9/2015  v3.3, use com names but currently only pulls one ACS file (out of three), because they are not uniquely named. 
%               1/2016  v3.3, so up to 3 ACS files can be included
%               6/2016 v 3.4, includ sdi coms (Vasaila 536)
%               1/2017  v4.0, include SBG, Nortek Signature and RM Young 8100 sonic, plus index on SBG, not AQ
%               9/2017  add oxygen optode and sea owl fluorometer
%               9/2019  changed time convention to use start of the burst,rather than end
%

if ispc
    slash = '\';
else
    slash = '/';
end

% Experiment directory and sampling parameters (user defined)
expdir = 'S:\SEAFAC\June2024';
SBDfold = 'ProcessedSBD';

% Sampling Parameters
burstinterval = 12; % minutes between bursts
burstlength = 512/60; % minutes of sampling during each burst
payloadtype = '7'; % v3.3 (2015) and up 

% Identify missions
missions = dir([expdir slash 'SWIFT*']);
missions = missions([missions.isdir]);

%% Loop through missions

for im = 2%:length(missions)

missiondir = [missions(im).folder slash missions(im).name];
cd(missiondir)
sname = missions(im).name;

diaryfile = [missions(im).name '_createSBD.txt'];
if exist(diaryfile,'file')
delete(diaryfile);
end
diary(diaryfile)
disp(['Compiling ' sname])


%%% Create folder for new SBD files %%%
if ~exist([missiondir slash SBDfold],'dir')
    mkdir([missiondir slash SBDfold])
end

%%% Create payload type temporary file %%%

payloadfile = [missiondir slash 'payload'];
fid = fopen(payloadfile,'wb');
fwrite(fid,payloadtype,'uint8');
fclose(fid);

%%% Find all processed (PRC) files in all port folders

PRCfiles = dir([missiondir slash '*' slash 'Processed' slash '*' slash '*PRC*.dat']);

%%%  Glob all processed files (per instrument) %%%
% and put these all in one directory (skip if already in one directory)

% if ~exist([missiondir slash 'PRC'],'dir')
% 
%     mkdir([missiondir slash 'PRC'])
% 
%     progressbar(['Globbing PRC files for ' sname])
%     for iprc = 1:length(PRCfiles)
%         progressbar(iprc/length(PRCfiles))
%         copyfile([PRCfiles(iprc).folder slash PRCfiles(iprc).name],[missiondir slash 'PRC'])
%     end
% 
% else
%     disp(['*** PRC files for ' sname ' already globbed ***'])
% 
% end

%%% Use IMU or SBG to identify all bursts, as reference files %%%
% (b/c either IMU or SBG is always present)

% refbfiles = dir([missiondir slash 'PRC' slash '*IMU*_PRC*.dat']);
% if isempty(refbfiles)
%     refbfiles = dir([missiondir slash 'PRC' slash '*SBG*_PRC*.dat']);
% else
%     disp('NO IMU (or SBG) files found');
% end

% refbfiles = PRCfiles(contains({PRCfiles.name},'IMU'));
% if isempty(refbfiles)
%     refbfiles = PRCfiles(contains({PRCfiles.name},'SBG'));
%     if isempty(refbfiles)
%         disp('No IMU or SBG files found')
%     end
% end

% Get reference burst 
burstfiletimes = NaN(length(PRCfiles),1);
for iburst = 1:length(burstfiletimes)
    date = datenum(PRCfiles(iburst).name(13:21));
    hour = str2double(PRCfiles(iburst).name(23:24));
    min = (str2double(PRCfiles(iburst).name(26:27))-1)*12;
    burstfiletimes(iburst) = date + datenum([0 0 0 hour min 0]);
end
[~,b] = unique(burstfiletimes);
refbfiles = PRCfiles(b);

%%% Loop through reference burst files (IMU or SBG) %%%

for iburst = 1:length(refbfiles)
   
    disp(['Creating SBD file for burst ' num2str(iburst) ' (' num2str(length(refbfiles)) ' bursts)'])
    
    ID = refbfiles(iburst).name(1:7);
    date = refbfiles(iburst).name(13:21);
    hour = refbfiles(iburst).name(23:24);
    burst = refbfiles(iburst).name(26:27);
    bfilename = [date '_' hour '_' burst '_PRC.dat'];

    % Name concat file same as if pulled from swiftserver
    minute = num2str((str2double(burst(2))-1) * burstinterval);
    if length(minute) == 1
        minute = ['0' minute]; %#ok<AGROW>
    end 
    sbdfile = [missiondir slash SBDfold slash 'buoy-SWIFT_' ID(6:7) '-' date '_' hour  minute '000.sbd'];

    % Find all PRC files for this burst (instead of globbing files)
    PRCburstfiles = PRCfiles(contains({PRCfiles.name},bfilename));
    
    % % Look for, rename and copy multiple ACS files (on different com ports)
    % ACStopfile = dir([missiondir slash 'COM-7' slash 'Processed' slash '*' slash ID '_ACS_' bfilename]);
    % if ~empty(ACStopfile)
    % copyfile([ACStopfile.folder slash ACStopfile.name],...
    %     [missiondir slash 'PRC' slash ID '_ACStop_' bfilename])
    % end
    % ACSmidfile = dir([missiondir slash 'COM-8' slash 'Processed' slash '*' slash ID '_ACS_' bfilename]);
    % if ~isempty(ACSmidfile)
    % copyfile([ACSmidfile.folder slash ACSmidfile.name],...
    %     [missiondir slash 'PRC' slash ID '_ACSmid_' bfilename])
    % end
    % ACSbottomfile = dir([missiondir slash 'COM-9' slash 'Processed' slash '*' slash ID '_ACS_' bfilename]);
    % if ~isempty(ACSbottomfile)
    % copyfile([ACSbottomfile.folder slash ACSbottomfile.name],...
    %     [missiondir slash 'PRC' slash ID '_ACSbottom_' bfilename])
    % end
    % 
    % % List of files to concatenate (to make SBD files)
    % AQHfile = [missiondir slash 'PRC' slash ID '_AQH_' bfilename];
    % AQDfile = [missiondir slash 'PRC' slash ID '_AQD_' bfilename];
    % PB2file = [missiondir slash 'PRC' slash ID '_PB2_' bfilename];
    % RADfile = [missiondir slash 'PRC' slash ID '_536_' bfilename];
    % IMUfile = [missiondir slash 'PRC' slash ID '_IMU_' bfilename];
    % SBGfile = [missiondir slash 'PRC' slash ID '_SBG_' bfilename];
    % ACSfiletop = [missiondir slash 'PRC' slash ID '_ACStop_' bfilename];
    % ACSfilemid = [missiondir slash 'PRC' slash ID '_ACSmid_' bfilename];
    % ACSfilebottom = [missiondir slash 'PRC' slash ID '_ACSbottom_' bfilename];
    % Y81file = [missiondir slash 'PRC' slash ID '_Y81_' bfilename];
    % SIGfile = [missiondir slash 'PRC' slash ID '_SIG_' bfilename];
    % ACOfile = [missiondir slash 'PRC' slash ID '_ACO_' bfilename];
    % SWLfile = [missiondir slash 'PRC' slash ID '_SWL_' bfilename];
    % 
    % % Create system command to concatenate files
    % if ispc
    % syscommand = ['copy /b payload+' AQHfile '+' AQDfile '+' PB2file '+' RADfile '+' IMUfile '+' SBGfile '+' ACSfiletop '+' ACSfilemid '+' ACSfilebottom '+' Y81file '+' SIGfile '+' ACOfile '+' SWLfile '+' ' ' sbdfile];
    % else
    %     syscommand = ['!cat payload ' AQHfile ' ' AQDfile ' ' PB2file ' ' RADfile ' ' IMUfile ' ' SBGfile ' ' Y81file ' ' SIGfile ' ' ACSfiletop ' ' ACSfilemid ' ' ACSfilebottom ' ' ACOfile ' ' SWLfile ' > ' sbdfile];
    % end

    % Create system commmand to concatenate files
    if ispc
    syscommand = ['copy /b ' payloadfile];
    for iprc = 1:length(PRCburstfiles)
        syscommand = [syscommand '+' PRCburstfiles(iprc).folder slash PRCburstfiles(iprc).name]; %#ok<*AGROW>
    end
    syscommand = [syscommand ' ' sbdfile];
    else
        syscommand = ['!cat ' payloadfile];
        for iprc = 1:length(PRCburstfiles)
            syscommand = [syscommand ' ' PRCburstfiles(iprc).folder slash PRCburstfiles(iprc).name];
        end
        syscommand = [syscommand ' > ' sbdfile];
    end

    % Execute system command to concatenate files
    status = system(syscommand);
    if status~=0
        warning('SBD file creation (PRC concatenation) failed...')
    end

end % End burst loop

delete(payloadfile)
diary off

end % End mission loop